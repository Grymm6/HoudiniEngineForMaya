source houdiniEngineAssetLibraryManager;
source houdiniEngineAssetSync;
source houdiniEngineUtils;
source houdiniEngineBakeAsset;
source houdiniEngineRemoveHistory;

proc string[] getHoudiniVersions()
{
    string $houdiniVersion = `houdiniEngine -houdiniVersion`;

    string $houdiniVersionTokens[];
    tokenize $houdiniVersion "." $houdiniVersionTokens;

    string $houdiniMajorMinor = `format
        -stringArg $houdiniVersionTokens[0]
        -stringArg $houdiniVersionTokens[1]
        "^1s.^2s"`;

    stringArrayRemoveAtIndex(0, $houdiniVersionTokens);
    stringArrayRemoveAtIndex(0, $houdiniVersionTokens);
    string $houdiniBuild = stringArrayToString($houdiniVersionTokens, ".");

    return {$houdiniMajorMinor, $houdiniBuild};
}

global proc
houdiniEngine_browseAssetLibrary()
{
    string $filter = "Houdini Asset Library (*.otl *.hda *.otllc *.hdalc *.otlnc *.hdanc);;All Files (*.*)";
    string $results[] = `fileDialog2
        -caption "Browse Asset Library"
        -okCaption "Open"
        -fileFilter $filter
        -fileMode 1`;
    if(size($results) == 0)
    {
        return;
    }

    string $assetLibraryFilePath = $results[0];

    houdiniEngine_loadAssetLibrary($assetLibraryFilePath);
}

global proc
houdiniEngine_loadAssetLibrary(string $assetLibraryFilePath)
{
    if(size(`houdiniAsset -listAssets $assetLibraryFilePath`) == 0)
    {
        return;
    }

    string $assets[] = `houdiniAsset -listAssets $assetLibraryFilePath`;
    if(size($assets) == 0)
    {
        return;
    }

    string $asset;
    if(size($assets) == 1)
    {
        // just load the first asset
        $asset = $assets[0];
    }
    else if(size($assets) > 1)
    {
        // popup a dialog for the user to choose
        $asset = `layoutDialog
            -title "Choose Asset to Instantiate"
            -uiScript ("houdiniEngine_assetPicker"
                + " \"" + $assetLibraryFilePath + "\""
                + " \"The Asset Library contains multiple assets. Please choose one to instantiate.\"")`;

        if($asset == "dismiss")
        {
            $asse = "";
        }
    }

    if(size($asset))
    {
        houdiniEngine_loadAsset($assetLibraryFilePath, $asset);
    }
}

global proc
houdiniEngine_loadAsset(string $assetLibraryFilePath, string $asset)
{
    houdiniEngine_addRecentAsset $assetLibraryFilePath $asset;
    houdiniEngineAssetLibraryManager_addLoadedFile $assetLibraryFilePath;

    houdiniAsset -loadAsset $assetLibraryFilePath $asset;
}

global proc
houdiniEngine_assetPicker(string $assetLibraryFilePath, string $message)
{
    string $formLayout = `setParent -q`;

    formLayout -e -width 300 $formLayout;

    string $text = `text -label $message`;

    string $textScrollList = `textScrollList`;

    string $okButton = `button
        -label "OK"
        -command ("layoutDialog -dismiss `textScrollList -q -selectItem " + $textScrollList + "`")`;
    string $cancelButton = `button
        -label "Cancel"
        -command "layoutDialog -dismiss \"\""`;

    formLayout -edit
        -attachForm $text "top" 5
        -attachForm $text "left" 5
        -attachForm $text "right" 5
        -attachNone $text "bottom"

        -attachControl $textScrollList "top" 5 $text
        -attachForm $textScrollList "left" 5
        -attachForm $textScrollList "right" 5
        -attachNone $textScrollList "bottom"

        -attachControl $okButton "top" 5 $textScrollList
        -attachForm $okButton "left" 5
        -attachPosition $okButton "right" 5 33
        -attachNone $okButton "bottom"

        -attachControl $cancelButton "top" 5 $textScrollList
        -attachPosition $cancelButton "left" 5 66
        -attachForm $cancelButton "right" 5
        -attachNone $cancelButton "bottom"

        $formLayout;

    textScrollList -e
        -doubleClickCommand ("layoutDialog -dismiss `textScrollList -q -selectItem " + $textScrollList + "`")
        $textScrollList;

    string $assets[] = `houdiniAsset -listAssets $assetLibraryFilePath`;
    for($asset in $assets)
    {
        textScrollList -e
            -append $asset
            $textScrollList;
    }
}

global proc
houdiniEngine_addRecentAsset(string $assetLibraryFilePath, string $asset)
{
    string $newRecentAsset = $assetLibraryFilePath + "?" + $asset;

    int $index = -1;
    if(`optionVar -exists houdiniEngine_recentAssets`)
    {
        // Maya 2012 doesn't have stringArrayFind
        string $recentAssets[] = `optionVar -q houdiniEngine_recentAssets`;
        for($i = 0; $i < size($recentAssets); $i++)
        {
            if($newRecentAsset == $recentAssets[$i])
            {
                $index = $i;
                break;
            }
        }
    }

    // does it already exist?
    if($index != -1)
    {
        optionVar -removeFromArray houdiniEngine_recentAssets $index;
        optionVar -stringValueAppend houdiniEngine_recentAssets $newRecentAsset;
    }
    else
    {
        optionVar -stringValueAppend houdiniEngine_recentAssets $newRecentAsset;
    }

    int $numToRemove = `optionVar -arraySize houdiniEngine_recentAssets` - 20;
    for($i = 0; $i < $numToRemove; $i++)
    {
        optionVar -removeFromArray houdiniEngine_recentAssets 0;
    }
}

global proc
houdiniEngine_buildRecentAssetsMenu(string $menuItem)
{
    string $recentAssets[];
    if(`optionVar -exists houdiniEngine_recentAssets`)
    {
        $recentAssets = `optionVar -q houdiniEngine_recentAssets`;
    }

    // same as existing menuItems?
    string $existingMenus[] = `menu -query -itemArray $menuItem`;
    int $numExistingMenus = size($existingMenus);
    if($numExistingMenus == size($recentAssets))
    {
        for($i = 0; $i < $numExistingMenus; $i++)
        {
            string $label = `menuItem -query -label $existingMenus[$i]`;
            if($label != $recentAssets[$numExistingMenus-$i-1])
            {
                break;
            }
        }

        if($i == $numExistingMenus)
        {
            return;
        }
    }

    // clear existing
    menu -edit -deleteAllItems $menuItem;

    setParent -menu $menuItem;

    for($i = size($recentAssets); $i-- > 0;)
    {
        string $recentAsset = $recentAssets[$i];

        int $separator = size(match("^.*?", $recentAsset));
        string $assetLibraryFilePath = substring($recentAsset, 1, $separator - 1);
        string $assetType = substring($recentAsset, $separator + 1, size($recentAsset));

        menuItem
            -label ($assetType + " - " + $assetLibraryFilePath)
            -command ("houdiniEngine_loadAsset"
                    + " \"" + encodeString($assetLibraryFilePath) + "\""
                    + " \"" + encodeString($assetType) + "\"");
    }
}

global proc
houdiniEngine_reloadSelectedAssets()
{
    string $old_selection[] = `ls -selection -long`;

    string $assetNodes[] = houdiniEngine_getSelectedAssetNodes();
    if(size($assetNodes) < 1)
    {
        error("Please select at least one houdiniAsset node to reload.");
    }

    for($assetNode in $assetNodes)
    {
        houdiniAsset -reloadAsset $assetNode;
    }

    catchQuiet(`select -replace $old_selection`);
}

global proc
houdiniEngine_bakeSelectedAssets()
{
    string $old_selection[] = `ls -selection -long`;

    string $assetNodes[] = houdiniEngine_getSelectedAssetNodes();
    if(size($assetNodes) < 1)
    {
        error("Please select at least one houdiniAsset node to bake");
    }

    for($assetNode in $assetNodes)
    {
        houdiniEngine_bakeAsset($assetNode);
    }

    catchQuiet(`select -replace $old_selection`);
}

global proc
houdiniEngine_removeSelectedHistory()
{
    string $old_selection[] = `ls -selection -long`;

    string $assetNodes[] = houdiniEngine_getSelectedAssetNodes();
    if(size($assetNodes) < 1)
    {
        error("Please select at least one houdiniAsset node to bake");
    }

    for($assetNode in $assetNodes)
    {
        houdiniEngine_removeHistory($assetNode);
    }

    catchQuiet(`select -replace $old_selection`);
}
global proc
houdiniEngine_addSelectedHistory()
{
    if(!`exists houdiniEngine_addHistory`)
         source houdiniEngineHistoryAsset.mel;
    string $old_selection[] = `ls -selection -long`;

    string $assetNodes[] = houdiniEngine_getSelectedAssetNodes();
    if(size($assetNodes) != 1)
    {
        error("Please select exactly one asset node to add to history");
    }
    select -tgl $assetNodes[0];
    houdiniEngine_addHistory($assetNodes[0]);

    catchQuiet(`select -replace $old_selection`);
}

global proc
houdiniEngine_createInstance(string $assetNode,
                              string $objToInstancePath,
                              string $parent,
                              int $instancerIndex,
                              int $instanceIndex)
{
    string $array[] = stringToStringArray($objToInstancePath, "|");
    string $objToInstanceName = $array[size($array) - 1];
    string $newInstanceName = $objToInstanceName + "_instance" + $instanceIndex;
    string $newInstance[] = `instance -name $newInstanceName $objToInstancePath`;

    if($parent != "")
    {
        parent $newInstance[0] $parent;
    }

    showHidden $newInstance[0];

    string $outputTransformPlug = $assetNode + ".outputInstancers[" + $instancerIndex + "]" + ".outputInstanceTransform[" + $instanceIndex + "]";
    string $outputTranslatePlug = $outputTransformPlug + ".outputInstanceTranslate";
    string $newInstanceTranslatePlug = $newInstance[0] + ".t";
    connectAttr $outputTranslatePlug $newInstanceTranslatePlug;

    string $outputRotatePlug = $outputTransformPlug + ".outputInstanceRotate";
    string $newInstanceRotatePlug = $newInstance[0] + ".r";
    connectAttr $outputRotatePlug $newInstanceRotatePlug;

    string $outputScalePlug = $outputTransformPlug + ".outputInstanceScale";
    string $newInstanceScalePlug = $newInstance[0] + ".s";
    connectAttr $outputScalePlug $newInstanceScalePlug;
}

global proc houdiniEngine_saveHipFile()
{
    string $license = `houdiniEngine -license`;

    string $hipExtension;
    if($license == "Houdini-Indie"
        || $license == "Houdini-Engine-Indie")
    {
        $hipExtension = "*.hiplc";
    }
    else
    {
        $hipExtension = "*.hip";
    }

    string $filter = "Houdini Scene Files (" + $hipExtension + ");;All Files (*.*)";

    string $results[] = `fileDialog2
        -caption "Save Underlying Houdini Scene"
        -okCaption "Save"
        -fileFilter $filter
        -fileMode 0`;

    if(size($results) == 0)
    {
        return;
    }

    houdiniEngine -saveHIP $results[0];
}

global proc
houdiniEngine_viewInHoudini()
{
    int $isLinux = `about -linux`;
    int $isWindows = `about -win`;
    int $isMac = `about -mac`;

    string $hipFile = `houdiniEngine -makeTempDir`;
    $hipFile += "/houdiniEngineForMaya_" + `getpid` + ".hip";
    $hipFile = toNativePath($hipFile);

    houdiniEngine -saveHIP $hipFile;

    string $cmds[];

    $cmds[size($cmds)] = "houdini -foreground \"" + $hipFile + "\"";
    if($isLinux || $isMac)
    {
        $cmds[size($cmds)] = "rm -f \"" + $hipFile + "\"";
    }
    else if($isWindows)
    {
        $cmds[size($cmds)] = "del \"" + $hipFile + "\"";
    }

    houdiniEngine_run($cmds);
}

global proc
houdiniEngine_launchOrboltPageClick()
{
    launch -web "http://www.orbolt.com/maya";
}

global proc
houdiniEngine_onlineDocumentation()
{
    string $houdiniVersions[] = getHoudiniVersions();

    launch -web ("http://www.sidefx.com/docs/maya" + $houdiniVersions[0] + "/");
}

global proc
houdiniEngine_launchForum()
{
    launch -web "https://www.sidefx.com/forum/46/";
}

global proc
houdiniEngine_runHKey()
{
    string $cmds[];

    $cmds[size($cmds)] = "hkey";

    houdiniEngine_run($cmds);
}

global proc
houdiniEngine_launchSubmitBugs()
{
    string $houdiniEngineVersion  = `houdiniEngine -houdiniEngineVersion`;

    string $operatingSystem = `about -operatingSystem`;
    string $mayaVersion = `about -version`;
    string $mayaCutIdentifier = `about -cutIdentifier`;

    string $houdiniVersions[] = getHoudiniVersions();

    string $extraURLParameters;

    // version
    $extraURLParameters += `format
        -stringArg $houdiniVersions[0] "&version=^1s"`;

    // build
    $extraURLParameters += `format
        -stringArg $houdiniVersions[1] "&build=^1s"`;

    // category
    $extraURLParameters += "&category=Maya%20Plug-in";

    // platform
    if($operatingSystem == "linux64")
    {
        $extraURLParameters += "&platform=Linux%2064-bit";
    }
    else if($operatingSystem == "linux")
    {
        $extraURLParameters += "&platform=Linux%2032-bit";
    }
    else if($operatingSystem == "win64")
    {
        $extraURLParameters += "&platform=Windows%2064-bit";
    }
    else if($operatingSystem == "nt")
    {
        $extraURLParameters += "&platform=Windows%2032-bit";
    }
    else if($operatingSystem == "mac")
    {
        $extraURLParameters += "&platform=Mac%20OSX%2064-bit";
    }

    // description
    // It seems like "launch -web" will automatically convert "\n" to "%0A".
    string $description;
    string $temp;

    $temp = `format
        -stringArg $mayaVersion
        -stringArg $mayaCutIdentifier
        "Maya Version: ^1s (^2s)\n"`;

    $description += substituteAllString(
            $temp,
            " ",
            "%20"
            );

    if(`houdiniEngine -houdiniVersion`
            != `houdiniEngine -buildHoudiniVersion`)
    {
        string $buildHoudiniVersion = `houdiniEngine -buildHoudiniVersion`;

        $temp = `format
            -stringArg $buildHoudiniVersion
            "Build Houdini Version: ^1s\n"`;

        $description += substituteAllString(
                $temp,
                " ",
                "%20"
                );
    }

    $extraURLParameters += `format
        -stringArg $description
        "&description=^1s"`;

    launch -web ("http://archive.sidefx.com/index.php?option=com_content&task=view&id=768&Itemid=239"
            + $extraURLParameters);
}

global proc
houdiniEngine_launchChangeLog()
{
    string $houdiniVersions[] = getHoudiniVersions();

    string $extraURLParameters;

    // version
    $extraURLParameters += `format
        -stringArg $houdiniVersions[0]
        "&version=^1s"`;

    // buildend
    $extraURLParameters += `format
        -stringArg $houdiniVersions[1]
        "&buildend=^1s"`;

    launch -web ("https://archive.sidefx.com/index.php?option=com_journal&Itemid=213&page=index&journal=default&view=FULL&logfile=ALL&icon=maya&perpage=20"
            + $extraURLParameters);
}

global proc
houdiniEngine_launchGitHub()
{
    launch -web "https://github.com/sideeffects/HoudiniEngineForMaya";
}

global proc
houdiniEngineCreateUI()
{
    //cleanup UI
    houdiniEngineDeleteUI;

    global string $gMainWindow;
    setParent $gMainWindow;

    menu -label "Houdini Engine"
        -tearOff true
        houdiniEngineMenu;

    menuItem
        -label "Load Asset..."
        -command "houdiniEngine_browseAssetLibrary";

    $recentAssetsMenu = `menuItem
        -label "Recent Assets"
        -subMenu true`;
    setParent -menu ..;

    menuItem -label "Asset Library Manager"
        -command "houdiniEngineAssetLibraryManager";

    menuItem -divider true;

    menuItem -label "Orbolt Asset Browser"
        -sourceType "python"
        -command "import houdini_engine_for_maya.asset_store\nhoudini_engine_for_maya.asset_store.show_asset_store_window()";

    menuItem -label "Get Assets from Orbolt"
        -command "houdiniEngine_launchOrboltPageClick";

    menuItem -divider true;

    menuItem -label "Sync Asset"
        -command "houdiniEngine_syncSelectedAsset";
    menuItem -label "Bake Asset"
        -command "houdiniEngine_bakeSelectedAssets";
    menuItem -label "Remove Asset From History"
        -command "houdiniEngine_removeSelectedHistory";
    menuItem -label "Add Asset To History"
        -command "houdiniEngine_addSelectedHistory";
    menuItem -label "Reload Asset"
       -command "houdiniEngine_reloadSelectedAssets";

    menuItem -divider true;

    menuItem
        -label "Debugging"
        -subMenu true
        -tearOff true;

        menuItem -label "View Assets in Houdini"
            -command "houdiniEngine_viewInHoudini";

        menuItem -label "Save Assets to Houdini Scene..."
            -command "houdiniEngine_saveHipFile";

    setParent -menu ..;

    menuItem -divider true;

    menuItem -label "Preferences..."
        -command "houdiniEnginePreferences";

    menuItem -divider true;

    menuItem
        -label "Help and Support"
        -subMenu true;

        menuItem -label "Online documentation"
            -command "houdiniEngine_onlineDocumentation";

        menuItem -divider true;

        menuItem -label "Visit Houdini Engine for Maya forum"
            -command "houdiniEngine_launchForum";

        menuItem -label "Submit Bugs and RFEs"
            -command "houdiniEngine_launchSubmitBugs";

        menuItem -label "View Change Log"
            -command "houdiniEngine_launchChangeLog";

        menuItem -label "Contribute on GitHub"
            -command "houdiniEngine_launchGitHub";

        menuItem -divider true;

        menuItem -label "Houdini License Administrator"
            -command "houdiniEngine_runHKey";

    setParent -menu ..;

    menuItem -e -postMenuCommand ("houdiniEngine_buildRecentAssetsMenu"
            + " \"" + $recentAssetsMenu + "\"")
        $recentAssetsMenu;
}
